{"version":3,"file":"tiny-ga-events-helper.esm.dev.js","sources":["../src/tiny-ga-events-helper.js"],"sourcesContent":["/**\n * @typedef TinyGaEventsHelperOptions\n * @property {boolean?} debug\n */\n\n/**\n * @typedef TinyGaEventsHelperEvent\n * @property {string} el\n * @property {string} domEvent\n * @property {string} eventCategory\n * @property {string} eventAction\n * @property {(?string|?Function)} eventLabel\n * @property {(?string|?Function)} eventValue\n */\n\n/**\n * @typedef TinyGaEventsHelper\n * @property {TinyGaEventsHelperOptions} options\n * @property {TinyGaEventsHelperEvent[]} events;\n */\n\n/** @type {string[]} */\nconst mandatoryKeys = ['domEvent', 'el', 'eventCategory', 'eventAction']\n\n/** @type {string[]} */\nconst availableKeysForEvent = [\n  'eventCategory',\n  'eventAction',\n  'eventLabel',\n  'eventValue',\n]\n\n/**\n * @type {TinyGaEventsHelper}\n */\nexport default class TinyGaEventsHelper {\n  /**\n   * @param {TinyGaEventsHelperEvent[]} events\n   * @param {TinyGaEventsHelperOptions} options\n   * @constructor\n   */\n  constructor(events, options = { debug: false }) {\n    this.events = events\n    this.options = options\n\n    if (this.options.debug) {\n      console.group('Received events: ')\n      console.log(this.events)\n      console.groupEnd()\n    }\n\n    if (TinyGaEventsHelper.isValidConfig(this.events)) {\n      this.addEvents(this.events)\n    } else {\n      throw 'Invalid configuration exception.'\n    }\n  }\n\n  /**\n   * Adds a single event to Google Analytics\n   * @param {TinyGaEventsHelperEvent} event\n   */\n  addEvent(event) {\n    const self = this\n    let el = document.querySelectorAll(event.el)\n    for (let i = 0; i < el.length; i++) {\n      el[i].addEventListener(event.domEvent, function () {\n        if (ga) {\n          ga(\n            'send',\n            Object.assign(\n              { hitType: 'event' },\n              TinyGaEventsHelper.extractValuesFromEvent(\n                event,\n                this,\n                self.options.debug\n              )\n            )\n          )\n        } else {\n          throw 'Google Analytics not included or blocked by the browser.'\n        }\n      })\n    }\n  }\n\n  /**\n   * Adds a collection of events\n   * @param {TinyGaEventsHelperEvent[]} events\n   */\n  addEvents(events = []) {\n    events.length > 0 && events.map(this.addEvent.bind(this))\n  }\n\n  /**\n   * Validates the instance config\n   * @param {TinyGaEventsHelperEvent[]}\n   * @return {boolean}\n   * @static\n   */\n  static isValidConfig(events) {\n    if (Array.isArray(events) && events.length > 0) {\n      for (let i = 0; i < events.length; i++) {\n        let currentEvent = events[i]\n        for (let j = 0; j < mandatoryKeys.length; j++) {\n          let currentMandatoryKey = mandatoryKeys[j]\n          if (\n            !currentEvent.hasOwnProperty(currentMandatoryKey) ||\n            currentEvent[currentMandatoryKey] === null\n          ) {\n            throw `The configuration at position \"${j}\" doesn't have the mandatory key \"${currentMandatoryKey}\" or it's null.`\n            return false\n          }\n        }\n      }\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * @param {TinyGaEventsHelperEvent} event\n   * @param {HTMLElement} el\n   * @param {?boolean} [showDebugInfo=false]\n   * @static\n   * @return {{}}\n   */\n  static extractValuesFromEvent(event, el, showDebugInfo = false) {\n    let keys = Object.keys(event)\n    let values = {}\n    showDebugInfo && console.group(`Extracting values from event:`)\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i]\n      if (!availableKeysForEvent.includes(key)) {\n        showDebugInfo && console.log(`Invalid key for GA event:\"' + key + '\".`)\n        continue\n      }\n\n      let value = event[key]\n      if (typeof value === 'function') {\n        showDebugInfo &&\n          console.info(`Return type of the event key \"${key}\" is a function.`)\n        values[key] = value.apply(el)\n      } else {\n        showDebugInfo &&\n          console.info(\n            `Return type of the event key \"${key}\" is a literal \"${value}\".`\n          )\n        values[key] = value\n      }\n    }\n\n    if (showDebugInfo) {\n      console.group('Values:')\n      console.log(values)\n      console.groupEnd()\n      console.groupEnd()\n    }\n    return values\n  }\n}\n"],"names":["mandatoryKeys","availableKeysForEvent","TinyGaEventsHelper","events","options","debug","console","group","log","groupEnd","isValidConfig","addEvents","event","self","el","document","querySelectorAll","i","length","addEventListener","domEvent","ga","Object","assign","hitType","extractValuesFromEvent","map","addEvent","bind","Array","isArray","currentEvent","j","currentMandatoryKey","hasOwnProperty","showDebugInfo","keys","values","key","includes","value","info","apply"],"mappings":"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"}