{"version":3,"file":"tiny-ga-events-helper.umd.dev.js","sources":["../src/tiny-ga-events-helper.js"],"sourcesContent":["/**\n * @typedef TinyGaEventsHelperOptions\n * @property {boolean?} debug\n */\n\n/**\n * @typedef TinyGaEventsHelperEvent\n * @property {string} el\n * @property {string} domEvent\n * @property {string} eventCategory\n * @property {string} eventAction\n * @property {(?string|?Function)} eventLabel\n * @property {(?string|?Function)} eventValue\n */\n\n/**\n * @typedef TinyGaEventsHelper\n * @property {TinyGaEventsHelperOptions} options\n * @property {TinyGaEventsHelperEvent[]} events;\n */\n\n/** @type {string[]} */\nconst mandatoryKeys = ['domEvent', 'el', 'eventCategory', 'eventAction']\n\n/** @type {string[]} */\nconst availableKeysForEvent = [\n  'eventCategory',\n  'eventAction',\n  'eventLabel',\n  'eventValue',\n]\n\n/**\n * @type {TinyGaEventsHelper}\n */\nexport default class TinyGaEventsHelper {\n  /**\n   * @param {TinyGaEventsHelperEvent[]} events\n   * @param {TinyGaEventsHelperOptions} options\n   * @constructor\n   */\n  constructor(events, options = { debug: false }) {\n    this.events = events\n    this.options = options\n\n    if (this.options.debug) {\n      console.group('Received events: ')\n      console.log(this.events)\n      console.groupEnd()\n    }\n\n    if (TinyGaEventsHelper.isValidConfig(this.events)) {\n      this.addEvents(this.events)\n    } else {\n      throw 'Invalid configuration exception.'\n    }\n  }\n\n  /**\n   * Adds a single event to Google Analytics\n   * @param {TinyGaEventsHelperEvent} event\n   */\n  addEvent(event) {\n    const self = this\n    let el = document.querySelectorAll(event.el)\n    for (let i = 0; i < el.length; i++) {\n      el[i].addEventListener(event.domEvent, function () {\n        if (ga) {\n          ga(\n            'send',\n            Object.assign(\n              { hitType: 'event' },\n              TinyGaEventsHelper.extractValuesFromEvent(\n                event,\n                this,\n                self.options.debug\n              )\n            )\n          )\n        } else {\n          throw 'Google Analytics not included or blocked by the browser.'\n        }\n      })\n    }\n  }\n\n  /**\n   * Adds a collection of events\n   * @param {TinyGaEventsHelperEvent[]} events\n   */\n  addEvents(events = []) {\n    events.length > 0 && events.map(this.addEvent.bind(this))\n  }\n\n  /**\n   * Validates the instance config\n   * @param {TinyGaEventsHelperEvent[]}\n   * @return {boolean}\n   * @static\n   */\n  static isValidConfig(events) {\n    if (Array.isArray(events) && events.length > 0) {\n      for (let i = 0; i < events.length; i++) {\n        let currentEvent = events[i]\n        for (let j = 0; j < mandatoryKeys.length; j++) {\n          let currentMandatoryKey = mandatoryKeys[j]\n          if (\n            !currentEvent.hasOwnProperty(currentMandatoryKey) ||\n            currentEvent[currentMandatoryKey] === null\n          ) {\n            throw `The configuration at position \"${j}\" doesn't have the mandatory key \"${currentMandatoryKey}\" or it's null.`\n            return false\n          }\n        }\n      }\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * @param {TinyGaEventsHelperEvent} event\n   * @param {HTMLElement} el\n   * @param {?boolean} [showDebugInfo=false]\n   * @static\n   * @return {{}}\n   */\n  static extractValuesFromEvent(event, el, showDebugInfo = false) {\n    let keys = Object.keys(event)\n    let values = {}\n    showDebugInfo && console.group(`Extracting values from event:`)\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i]\n      if (!availableKeysForEvent.includes(key)) {\n        showDebugInfo && console.log(`Invalid key for GA event:\"' + key + '\".`)\n        continue\n      }\n\n      let value = event[key]\n      if (typeof value === 'function') {\n        showDebugInfo &&\n          console.info(`Return type of the event key \"${key}\" is a function.`)\n        values[key] = value.apply(el)\n      } else {\n        showDebugInfo &&\n          console.info(\n            `Return type of the event key \"${key}\" is a literal \"${value}\".`\n          )\n        values[key] = value\n      }\n    }\n\n    if (showDebugInfo) {\n      console.group('Values:')\n      console.log(values)\n      console.groupEnd()\n      console.groupEnd()\n    }\n    return values\n  }\n}\n"],"names":["mandatoryKeys","availableKeysForEvent","TinyGaEventsHelper","events","options","debug","console","group","log","groupEnd","isValidConfig","addEvents","event","self","el","document","querySelectorAll","i","length","addEventListener","domEvent","ga","Object","assign","hitType","extractValuesFromEvent","map","addEvent","bind","Array","isArray","currentEvent","j","currentMandatoryKey","hasOwnProperty","showDebugInfo","keys","values","key","includes","value","info","apply"],"mappings":"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"}